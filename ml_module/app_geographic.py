def show_detailed_analysis(df: pd.DataFrame):
    """Muestra an√°lisis detallado con gr√°ficos mejorados e informativos"""
    try:
        # Crear dos columnas para mostrar m√©tricas generales
        col1, col2 = st.columns(2)
        
        with col1:
            # M√©tricas generales
            st.write("### üìà M√©tricas Generales")
            total_actividades = int(df['num_actividades'].sum())
            total_asistentes = int(df['total_asistentes'].sum())
            promedio_eficiencia = float(df['eficiencia_actividad'].mean())
            
            st.metric(
                "Total Actividades", 
                f"{total_actividades:,}",
                f"{len(df)} municipios"
            )
            st.metric(
                "Total Asistentes", 
                f"{total_asistentes:,}",
                f"{promedio_eficiencia:.1f} asistentes/actividad"
            )
            
            # Distribuci√≥n por departamento
            st.write("### üó∫Ô∏è Distribuci√≥n por Departamento")
            
            # ... (mantener el resto del c√≥digo de visualizaciones departamentales)
            
        with col2:
            # ... (mantener el c√≥digo de visualizaciones de top municipios)
            
        # REMOVER LA SECCI√ìN DE PRIORIZACI√ìN DE GRUPOS DE INTER√âS DUPLICADA
        # Eliminar o comentar el c√≥digo que genera la primera tabla de priorizaci√≥n
        
        # Mantener solo las visualizaciones generales y dejar que la priorizaci√≥n 
        # de grupos de inter√©s se maneje exclusivamente en show_interest_group_prioritization
        
        # ... (mantener el resto de las visualizaciones generales)
        
    except Exception as e:
        logger.error(f"Error en an√°lisis detallado: {str(e)}")
        st.error(f"Error en an√°lisis detallado: {str(e)}")

def main():
    try:
        # ... (c√≥digo existente)
        
        # Modificar la estructura de pesta√±as para separar mejor el an√°lisis
        if st.session_state.analysis_done and st.session_state.results is not None:
            results = st.session_state.results
            maps = st.session_state.maps
            viz_data = st.session_state.viz_data
            
            # Reorganizar las pesta√±as para mejor separaci√≥n de contenido
            tab_geo, tab_grupos, tab_detalle = st.tabs([
                "An√°lisis Geogr√°fico",
                "Priorizaci√≥n de Grupos", 
                "An√°lisis Detallado"
            ])
            
            with tab_geo:
                try:
                    show_analysis(results, viz_data, maps)
                except Exception as e:
                    logger.error(f"Error mostrando an√°lisis geogr√°fico: {str(e)}")
                    st.error(f"Error mostrando an√°lisis geogr√°fico: {str(e)}")
            
            with tab_grupos:
                try:
                    # Mover la priorizaci√≥n de grupos a su propia pesta√±a
                    show_interest_group_prioritization(results)
                except Exception as e:
                    logger.error(f"Error mostrando priorizaci√≥n de grupos: {str(e)}")
                    st.error(f"Error mostrando priorizaci√≥n de grupos: {str(e)}")
            
            with tab_detalle:
                try:
                    st.subheader("üìã An√°lisis Detallado por Municipio", divider="blue")
                    show_detailed_analysis(results['data'])
                except Exception as e:
                    logger.error(f"Error mostrando an√°lisis detallado: {str(e)}")
                    st.error(f"Error mostrando an√°lisis detallado: {str(e)}")
                    
        # ... (resto del c√≥digo existente)
        
    except Exception as e:
        logger.error(f"Error en la aplicaci√≥n: {str(e)}")
        st.error("Ocurri√≥ un error inesperado. Por favor, intenta de nuevo.") 